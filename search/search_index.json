{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the FrangipaneTeam Terraform Framework Plan Modifiers documentation site This repository contains a collections of plan modifiers for the Terraform Plugin Framework.</p>"},{"location":"#plan-modifiers","title":"Plan Modifiers","text":"<ul> <li>StringPlanModifiers</li> <li>BoolPlanModifiers</li> <li>Int64PlanModifiers</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>For installing the plan modifiers, you can use the <code>go get</code> command:</p> <pre><code>go get github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers@latest\n</code></pre>"},{"location":"boolplanmodifier/","title":"StringPlanModifiers","text":"<p>Bool plan modifiers are used to modify the plan of a bool attribute. I will be used into the <code>PlanModifiers</code> field of the <code>schema.BoolAttribute</code> struct.</p>"},{"location":"boolplanmodifier/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfboolplanmodifier \"github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers/boolplanmodifier\"\n)\n</code></pre>"},{"location":"boolplanmodifier/#list-of-plan-modifiers","title":"List of Plan Modifiers","text":"<ul> <li><code>SetDefault</code> - Sets a default value for the attribute.</li> <li><code>SetDefaultEnvVar</code> - Sets a default value for the attribute from an environment variable.</li> <li><code>SetDefaultFunc</code> - Sets a default value for the attribute from a function.</li> </ul>"},{"location":"boolplanmodifier/#requirereplace","title":"RequireReplace","text":"<ul> <li><code>RequireReplaceIfBool</code> - Forces the resource to be replaced when the specified boolean attribute is changed.</li> </ul>"},{"location":"boolplanmodifier/requirereplaceifbool/","title":"<code>RequireReplaceIfBool</code>","text":"<p>This plan modifier is used to require a resource to be replaced if a boolean attribute is set to a expected value.</p>"},{"location":"boolplanmodifier/requirereplaceifbool/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\nPlanModifiers: []planmodifier.String{\nfboolplanmodifier.RequireReplaceIfBool(path.Root(\"force\"), true)\n},\n\"force\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"Force the resource ...\",\n},\n</code></pre>"},{"location":"boolplanmodifier/setdefault/","title":"<code>SetDefault</code>","text":"<p>This plan modifier is used to set a default value for a boolean attribute.</p>"},{"location":"boolplanmodifier/setdefault/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\nPlanModifiers: []planmodifier.String{\nfboolplanmodifier.SetDefault(true),\n},\n},\n</code></pre>"},{"location":"boolplanmodifier/setdefaultenvvar/","title":"<code>SetDefaultEnvVar</code>","text":"<p>This plan modifier is used to set a default value for a boolean from an environment variable.</p>"},{"location":"boolplanmodifier/setdefaultenvvar/#how-to-use-it","title":"How to use it","text":"<pre><code>export CAV_VAR_DEFAULT_NAME=\"true\"\n</code></pre> <pre><code>// Schema defines the schema for the resource.\nfunc (r *vappResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"\",\nPlanModifiers: []planmodifier.Bool{\nfboolplanmodifier.SetDefaultEnvVar(\"CAV_VAR_DEFAULT_NAME\"),\n},\n},\n</code></pre>"},{"location":"boolplanmodifier/setdefaultfunc/","title":"<code>SetDefaultFunc</code>","text":"<p>This plan modifier is used to set a default value for a boolean using a custom function.</p>"},{"location":"boolplanmodifier/setdefaultfunc/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\nPlanModifiers: []planmodifier.Bool{\nfboolplanmodifier.SetDefaultFunc(fboolplanmodifier.DefaultFunc(func(ctx context.Context, req planmodifier.BoolRequest, resp *fboolplanmodifier.DefaultFuncResponse) {\nif os.Getenv(\"CAV_VAR_1\") == \"foo\" &amp;&amp; os.Getenv(\"CAV_VAR_2\") == \"bar\" {\nresp.Value = true\nreturn\n}\n})),\n},\n},\n</code></pre>"},{"location":"int64planmodifier/","title":"StringPlanModifiers","text":"<p>BoInt64ol plan modifiers are used to modify the plan of a int64 attribute. I will be used into the <code>PlanModifiers</code> field of the <code>schema.Int64Attribute</code> struct.</p>"},{"location":"int64planmodifier/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfint64planmodifier \"github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers/int64planmodifier\"\n)\n</code></pre>"},{"location":"int64planmodifier/#list-of-plan-modifiers","title":"List of Plan Modifiers","text":"<ul> <li><code>SetDefault</code> - Sets a default value for the attribute.</li> <li><code>SetDefaultEnvVar</code> - Sets a default value for the attribute from an environment variable.</li> <li><code>SetDefaultFunc</code> - Sets a default value for the attribute from a function.</li> </ul>"},{"location":"int64planmodifier/#requirereplace","title":"RequireReplace","text":"<ul> <li><code>RequireReplaceIfBool</code> - Forces the resource to be replaced when the specified boolean attribute is changed.</li> </ul>"},{"location":"int64planmodifier/requirereplaceifbool/","title":"<code>RequireReplaceIfBool</code>","text":"<p>This plan modifier is used to require a resource to be replaced if a boolean attribute is set to a expected value.</p>"},{"location":"int64planmodifier/requirereplaceifbool/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"disk_size\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Int64{\nfint64planmodifier.RequireReplaceIfBool(path.Root(\"enabled\"), true)\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\n},\n</code></pre>"},{"location":"int64planmodifier/setdefault/","title":"<code>SetDefault</code>","text":"<p>This plan modifier is used to set a default value for a int64 attribute.</p>"},{"location":"int64planmodifier/setdefault/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"disk_size\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Int64{\nfint64planmodifier.SetDefault(100),\n},\n},\n</code></pre>"},{"location":"int64planmodifier/setdefaultenvvar/","title":"<code>SetDefaultEnvVar</code>","text":"<p>This plan modifier is used to set a default value for a int64 from an environment variable.</p>"},{"location":"int64planmodifier/setdefaultenvvar/#how-to-use-it","title":"How to use it","text":"<pre><code>export CAV_VAR_DEFAULT_DISK_SIZE=\"100\"\n</code></pre> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"disk_size\": schema.Int64Attribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Int64{\nfint64planmodifier.SetDefaultEnvVar(\"CAV_VAR_DEFAULT_DISK_SIZE\"),\n},\n},\n</code></pre>"},{"location":"int64planmodifier/setdefaultfunc/","title":"<code>SetDefaultFunc</code>","text":"<p>This plan modifier is used to set a default value for a int64 using a custom function.</p>"},{"location":"int64planmodifier/setdefaultfunc/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"The size of the disk in MB.\",\nPlanModifiers: []planmodifier.Bool{\nfint64planmodifier.SetDefaultFunc(fint64planmodifier.DefaultFunc(func(ctx context.Context, req planmodifier.Int64Request, resp *fint64planmodifier.DefaultFuncResponse) {\nresp.Value = req.PlanValue * 1024\n})),\n},\n},\n</code></pre>"},{"location":"stringplanmodifier/","title":"StringPlanModifiers","text":"<p>String plan modifiers are used to modify the plan of a string attribute. It will be used into the <code>PlanModifiers</code> field of the <code>schema.StringAttribute</code> struct.</p>"},{"location":"stringplanmodifier/#how-to-use-it","title":"How to use it","text":"<pre><code>import (\nfstringplanmodifier \"github.com/FrangipaneTeam/terraform-plugin-framework-planmodifiers/stringplanmodifier\"\n)\n</code></pre>"},{"location":"stringplanmodifier/#list-of-plan-modifiers","title":"List of Plan Modifiers","text":""},{"location":"stringplanmodifier/#setdefault","title":"SetDefault","text":"<ul> <li><code>SetDefault</code> - Sets a default value for the attribute.</li> <li><code>SetDefaultEnvVar</code> - Sets a default value for the attribute from an environment variable.</li> <li><code>SetDefaultFunc</code> - Sets a default value for the attribute from a function.</li> <li><code>SetDefaultEmptyString</code> - Sets a empty string as default value for the attribute.</li> </ul>"},{"location":"stringplanmodifier/#requirereplace","title":"RequireReplace","text":"<ul> <li><code>RequireReplaceIfBool</code> - Forces the resource to be replaced when the specified boolean attribute is changed.</li> </ul>"},{"location":"stringplanmodifier/#stringchange","title":"StringChange","text":"<ul> <li><code>ToLower</code> - Converts the string to lowercase.</li> <li><code>ToUpper</code> - Converts the string to uppercase.</li> </ul>"},{"location":"stringplanmodifier/requirereplaceifbool/","title":"<code>RequireReplaceIfBool</code>","text":"<p>This plan modifier is used to require a resource to be replaced if a boolean attribute is set to a expected value.</p>"},{"location":"stringplanmodifier/requirereplaceifbool/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.RequireReplaceIfBool(path.Root(\"enabled\"), true)\n},\n},\n\"enabled\": schema.BoolAttribute{\nOptional:            true,\nMarkdownDescription: \"Enable or disable ...\",\n},\n</code></pre>"},{"location":"stringplanmodifier/setdefault/","title":"<code>SetDefault</code>","text":"<p>This plan modifier is used to set a default value for a string attribute.</p>"},{"location":"stringplanmodifier/setdefault/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefault(\"default-name\"),\n},\n},\n</code></pre>"},{"location":"stringplanmodifier/setdefaultemptystring/","title":"<code>SetDefaultEmptyString</code>","text":"<p>This plan modifier is used to set a default empty value for a string.</p>"},{"location":"stringplanmodifier/setdefaultemptystring/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefaultEmptyString(),\n},\n},\n</code></pre>"},{"location":"stringplanmodifier/setdefaultenvvar/","title":"<code>SetDefaultEnvVar</code>","text":"<p>This plan modifier is used to set a default value for a string from an environment variable.</p>"},{"location":"stringplanmodifier/setdefaultenvvar/#how-to-use-it","title":"How to use it","text":"<pre><code>export CAV_VAR_DEFAULT_NAME=\"default-name\"\n</code></pre> <pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefaultEnvVar(\"CAV_VAR_DEFAULT_NAME\"),\n},\n},\n</code></pre>"},{"location":"stringplanmodifier/setdefaultfunc/","title":"<code>SetDefaultFunc</code>","text":"<p>This plan modifier is used to set a default value for a string using a custom function.</p>"},{"location":"stringplanmodifier/setdefaultfunc/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.SetDefaultFunc(fstringplanmodifier.DefaultFunc(func(ctx context.Context, req planmodifier.StringRequest, resp *fstringplanmodifier.DefaultFuncResponse) {\nif strings.Contains(req.PlanValue, \"foo\") {\nresp.Value = \"bar\"\nreturn\n}\n})),\n},\n},\n</code></pre>"},{"location":"stringplanmodifier/tolower/","title":"<code>ToLower</code>","text":"<p>This plan modifier is used to force the string to be lowercase.</p>"},{"location":"stringplanmodifier/tolower/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.ToLower(),\n},\n},\n</code></pre> main.tf<pre><code>resource \"resource_x\" \"example\" {\nname = \"FOO\"\n}\n</code></pre> terraform.tfstate<pre><code>{\n\"version\": 4,\n\"terraform_version\": \"1.0.0\",\n\"resources\": [\n{\n\"mode\": \"managed\",\n\"type\": \"resource_x\",\n\"name\": \"example\",\n\"provider\": \"provider[\\\"registry.terraform.io/hashicorp/x\\\"]\",\n\"instances\": [\n{\n\"schema_version\": 0,\n\"attributes\": {\n\"id\": \"example\",\n\"name\": \"foo\",\n},\n},\n],\n},\n],\n}\n</code></pre>"},{"location":"stringplanmodifier/toupper/","title":"<code>ToUpper</code>","text":"<p>This plan modifier is used to force the string to be uppercase.</p>"},{"location":"stringplanmodifier/toupper/#how-to-use-it","title":"How to use it","text":"<pre><code>// Schema defines the schema for the resource.\nfunc (r *xResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {\nresp.Schema = schema.Schema{\n(...)\n\"name\": schema.StringAttribute{\nOptional:            true,\nMarkdownDescription: \"A name for ...\",\nPlanModifiers: []planmodifier.String{\nfstringplanmodifier.ToUpper(),\n},\n},\n</code></pre> main.tf<pre><code>resource \"resource_x\" \"example\" {\nname = \"foo\"\n}\n</code></pre> terraform.tfstate<pre><code>{\n\"version\": 4,\n\"terraform_version\": \"1.0.0\",\n\"resources\": [\n{\n\"mode\": \"managed\",\n\"type\": \"resource_x\",\n\"name\": \"example\",\n\"provider\": \"provider[\\\"registry.terraform.io/hashicorp/x\\\"]\",\n\"instances\": [\n{\n\"schema_version\": 0,\n\"attributes\": {\n\"id\": \"example\",\n\"name\": \"FOO\",\n},\n},\n],\n},\n],\n}\n</code></pre>"}]}